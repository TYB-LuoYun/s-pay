<?xml version="1.0" encoding="UTF-8"?>

<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->
<!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->
<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->

<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 定义日志文件 输入位置 -->
    <!-- 不要写相对位置所以注释掉了 地址在logs 也就是在tomcat的logs下 -->
    <!-- 获取yml中的log地址 -->
    <springProperty scope="context" name="LOG_PATH" source="logging.file.path" defaultValue="logdir"/>

    <!-- 日志文件存储位置 -->
    <property name="LOG_PATH" value="${LOG_PATH}" />
    <!-- 监听器，指定日志文件存放目录 -->
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="15" />

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 对日志进行格式化 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n</pattern>
        </encoder>
    </appender>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">

        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 对日志进行格式化 -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n</pattern>
        </encoder>
    </appender>

    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender-->
    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--&lt;!&ndash;日志输出位置  可相对、和绝对路径 &ndash;&gt;-->
        <!--<fileNamePattern> ${LOG_PATH}/%d{yyyy-MM-dd}/error-log.log</fileNamePattern>-->
        <!--&lt;!&ndash; 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6，-->
        <!--则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除&ndash;&gt;-->
        <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--2==================================================文件大小超了就滚动========================================-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy" >
            <!--日志输出文件名-->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/error-log-%i.log</fileNamePattern>
            <!--日志保留天数-->
            <maxHistory>15</maxHistory>
            <!--单文件大小-->
            <maxFileSize>50MB</maxFileSize>
            <!--指定文件的上限值，超过删除旧的-->
            <totalSizeCap>20GB</totalSizeCap>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。 -->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">-->
        <!--<fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/info-log-%i.log</fileNamePattern>-->
        <!--<minIndex>1</minIndex>-->
        <!--<maxIndex>3</maxIndex>-->
        <!--</rollingPolicy>-->
        <!--&lt;!&ndash; 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动 &ndash;&gt;-->
        <!--<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">-->
        <!--<maxFileSize>10KB</maxFileSize>-->
        <!--</triggeringPolicy>-->


        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- WARN级别日志 appender -->
    <appender name="WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录WARN级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--&lt;!&ndash; 按天回滚 daily &ndash;&gt;-->
        <!--<fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/warn-log.log-->
        <!--</fileNamePattern>-->
        <!--&lt;!&ndash; 日志最大的历史 60天 &ndash;&gt;-->
        <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--2==================================================文件大小超了就滚动========================================-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy" >
            <!--日志输出文件名-->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/warn-log-%i.log</fileNamePattern>
            <!--日志保留天数-->
            <maxHistory>15</maxHistory>
            <!--单文件大小-->
            <maxFileSize>50MB</maxFileSize>
            <!--指定文件的上限值，超过删除旧的-->
            <totalSizeCap>20GB</totalSizeCap>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- INFO级别日志 appender -->
    <appender name="INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录INFO级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--1==================================================按天回滚========================================-->
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--&lt;!&ndash; 按天回滚 daily &ndash;&gt;-->
        <!--<fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/info-log.log-->
        <!--</fileNamePattern>-->
        <!--&lt;!&ndash; 日志最大的历史 60天 &ndash;&gt;-->
        <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->

        <!--2==================================================文件大小超了就滚动========================================-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy" >
            <!--日志输出文件名-->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/info-log-%i.log</fileNamePattern>
            <!--日志保留天数-->
            <maxHistory>15</maxHistory>
            <!--单文件大小-->
            <maxFileSize>50MB</maxFileSize>
            <!--指定文件的上限值，超过删除旧的-->
            <totalSizeCap>20GB</totalSizeCap>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- DEBUG级别日志 appender -->
    <appender name="DEBUG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录DEBUG级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--&lt;!&ndash; 按天回滚 daily &ndash;&gt;-->
        <!--<fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/debug-log.log-->
        <!--</fileNamePattern>-->
        <!--&lt;!&ndash; 日志最大的历史 60天 &ndash;&gt;-->
        <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--2==================================================文件大小超了就滚动========================================-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy" >
            <!--日志输出文件名-->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/debug-log-%i.log</fileNamePattern>
            <!--日志保留天数-->
            <maxHistory>15</maxHistory>
            <!--单文件大小-->
            <maxFileSize>50MB</maxFileSize>
            <!--指定文件的上限值，超过删除旧的-->
            <totalSizeCap>20GB</totalSizeCap>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- TRACE级别日志 appender -->
    <appender name="TRACE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 过滤器，只记录ERROR级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
        <!--&lt;!&ndash; 按天回滚 daily &ndash;&gt;-->
        <!--<fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/trace-log.log-->
        <!--</fileNamePattern>-->
        <!--&lt;!&ndash; 日志最大的历史 60天 &ndash;&gt;-->
        <!--<maxHistory>${maxHistory}</maxHistory>-->
        <!--</rollingPolicy>-->
        <!--2==================================================文件大小超了就滚动========================================-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy" >
            <!--日志输出文件名-->
            <fileNamePattern>${LOG_PATH}/%d{yyyy-MM-dd}/trace-log-%i.log</fileNamePattern>
            <!--日志保留天数-->
            <maxHistory>15</maxHistory>
            <!--单文件大小-->
            <maxFileSize>50MB</maxFileSize>
            <!--指定文件的上限值，超过删除旧的-->
            <totalSizeCap>20GB</totalSizeCap>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
    </appender>

    <!--<logger name="java.sql.PreparedStatement" value="DEBUG" />-->
    <!--<logger name="java.sql.Connection" value="DEBUG" />-->
    <!--<logger name="java.sql.Statement" value="DEBUG" />-->
    <!--<logger name="com.ibatis" value="DEBUG" />-->
    <!--<logger name="com.ibatis.common.jdbc.SimpleDataSource" value="DEBUG" />-->
    <!--<logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG"/>-->
    <!--<logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" value="DEBUG" />-->

    <!-- 不管root啥级别，强制显示,使用off可以强制直接关闭-->
    <logger name="org.springframework.amqp.rabbit" level="OFF" />
    <logger name="com.xxl.job.core.util" level="OFF" />

    <!-- 单独输出-->
    <logger name="com.dicomclub.module" level="DEBUG" >
        <appender-ref ref="console"/>
    </logger>

    <!--   默认显示 DEBUG + -->
    <root level="DEBUG">
        <!-- 控制台输出info界别的日志 -->
        <appender-ref ref="STDOUT" />
        <appender-ref ref="ERROR" />
        <appender-ref ref="INFO" />
        <appender-ref ref="WARN" />
        <appender-ref ref="DEBUG" />
        <appender-ref ref="TRACE" />
    </root>



</configuration>